\documentclass[handout]{beamer}


\usecolortheme[RGB={0,0,144}]{structure}
\usetheme{AnnArbor}\usecolortheme{beaver}
%\usetheme{CambridgeUS}\usecolortheme{crane}

\usepackage{verbatim,xmpmulti,color,multicol,multirow}
\setlength{\unitlength}{\textwidth}  % measure in textwidths
\usepackage[normalem]{ulem}

%\usepackage{beamerthemesplit}
\setbeamertemplate{navigation symbols}{}
%\setbeamercolor{alerted text}{fg=red}
%\setbeamertemplate{block body theorem}{bg=orange}
\setkeys{Gin}{width=0.6\textwidth}

\title{Introduction to Bayesian computation}
\author[Jarad Niemi]{Dr. Jarad Niemi}
\institute[Iowa State]{Iowa State University}
\date{\today}

\newcommand{\I}{\mathrm{I}}

\begin{document}

%\section{Temp??} \begin{comment}


<<options, results='hide', echo=FALSE>>=
# These are only needed for the slides
# No need to run if you are just running the R code
opts_chunk$set(fig.width=6, 
               fig.height=5, 
               out.width='.8\\linewidth', 
               fig.align='center', 
               size='tiny',
               echo=FALSE)
options(width=100)
@

<<libraries, echo=FALSE, message=FALSE>>=
library(reshape2)
library(plyr)
library(ggplot2)
library(xtable)
@

<<set_seed, echo=FALSE>>=
set.seed(1)
@

\frame{\maketitle}


\begin{frame}
\frametitle{Outline}

Bayesian computation
\begin{itemize}
\item Goal: $p(y) = \int p(y|\theta)p(\theta) d\theta$ or $E[h(\theta)|y] = \int h(\theta) p(\theta|y) d\theta$. 
\item Adaptive rejection sampling
\item Importance sampling
\end{itemize}

\end{frame}


\section{Adaptive rejection sampling}
\begin{frame}[fragile]
\frametitle{Adaptive rejection sampling}

\begin{definition}
A function is concave if 
\[ f((1-t)x+t y) \ge (1-t) f(x) + t f (y) \]
for any $0\le t\le 1$.
\end{definition}

\vspace{0.2in} \pause

<<fig.width=12>>=
opar = par(mar=c(2,2,0,0)+.1)
curve(dnorm(x, log=T), -2.1, 1.1, axes=F, frame=T, lwd=2,
      xlab='', ylab='')
axis(1, c(-2,1), labels=c('x','y'))
axis(2, c(dnorm(c(-2,1), log=T)), labels=c('f(x)','f(y)'))
segments(-2,dnorm(-2, log=T), 1, dnorm(1, log=T))
@

\end{frame}


\begin{frame}
\frametitle{Log-concavity}

\begin{definition}
A function $f(x)$ is log-concave if $log f(x)$ is concave. \pause A function is log-concave if and only if 
\begin{itemize}
\item $f'(x)/f(x)$ is monotone decrease or 
\item $(log f(x))'' < 0$.
\end{itemize}
\end{definition}

\vspace{0.2in}\pause

For example, $X\sim N(0,1)$ has log-concave density since 
\[ \frac{d^2}{dx^2} \log e^{-x^2/2} = \frac{d^2}{dx^2} -x^2/2 = \frac{d}{dx} -x = -1. \]
\end{frame}


\begin{frame}
\frametitle{Adaptive rejection sampling}

Adaptive rejection sampling can be used for distributions with log-concave densities. \pause It builds a piecewise linear envelope to the log density, \pause e.g. 

\vspace{0.2in}

<<fig.width=10>>=
opar = par(mar=rep(0,4)+.1)
curve(dnorm(x, log=T), -4, 4, lwd=2, axes=F, frame=T, ylim=c(-10,0))
deriv = function(x) -x

points = c(-2,.1,1.5)
for (p in points) abline(dnorm(p,log=T)-deriv(p)*p, deriv(p), lty=2)
par(opar)
@
\end{frame}





\begin{frame}
\frametitle{Updating the envelope}

As values are propose and rejected, the envelop gets updated:

\vspace{0.2in}

<<fig.width=10>>=
opar = par(mar=rep(0,4)+.1, mfrow=c(2,2))
deriv = function(x) -x

points = c(-2,1.5,.1, -3, -.6, 3.9)

for (i in 3:6) {
  curve(dnorm(x, log=T), -4, 4, lwd=2, axes=F, frame=T, ylim=c(-10,0))
  for (p in points[1:(i-1)]) abline(dnorm(p,log=T)-deriv(p)*p, deriv(p), lty=2)
  p = points[i]
  abline(dnorm(p,log=T)-deriv(p)*p, deriv(p), lty=2, col='red')
  abline(v=p, col='red')
}
par(opar)
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Adaptive rejection sampling in R}

<<echo=TRUE, fig.width=8>>=
library(ars)
x = ars(n=1000, function(x) -x^2/2, function(x) -x) 
hist(x, prob=T, 100)
curve(dnorm, type='l', add=T)
@
\end{frame}



% \begin{frame}
% \frametitle{Adaptive rejection sampling summary}
% 
% 
% 
% \end{frame}



\subsection{Importance sampling}
\frame{\frametitle{Importance sampling}
  Notice that 
  \[ E[h(\theta)|y] = \int h(\theta) p(\theta|y) d\theta \pause = \int h(\theta) \frac{p(\theta|y)}{g(\theta)} g(\theta) d\theta \]
  \pause where $g(\theta)$ is a proposal distribution\pause, so that we approximate the expectation via 
  \[ E[h(\theta)|y] \approx \frac{1}{S} \sum_{s=1}^S w\left(\theta^{(s)}\right) h\left(\theta^{(s)}\right) \]
  \pause where $\theta^{(s)} \stackrel{iid}{\sim} g(\theta)$ \pause and 
  \[ w\left(\theta^{(s)}\right) = \frac{p\left(\left.\theta^{(s)}\right|y\right)}{g(\theta^{(s)})} \]
  \pause is known as the importance weight. 
}

\frame{\frametitle{Importance sampling}
  If the target distribution is known only up to a proportionality constant, then 
  \[ E[h(\theta)|y] = \frac{\int h(\theta) q(\theta|y) d\theta}{\int q(\theta|y) d\theta} \pause = \frac{\int h(\theta) \frac{q(\theta|y)}{g(\theta)} g(\theta) d\theta}{\int \frac{q(\theta|y)}{g(\theta)} g(\theta) d\theta} \]
  \pause where $g(\theta)$ is a proposal distribution\pause, so that we approximate the expectation via 
  \[ E[h(\theta)|y] \approx \frac{\frac{1}{S} \sum_{s=1}^S w\left(\theta^{(s)}\right) h\left(\theta^{(s)}\right)}{\frac{1}{S} \sum_{s=1}^S w\left(\theta^{(s)}\right)} = \sum_{s=1}^S \tilde{w}\left(\theta^{(s)}\right) h\left(\theta^{(s)}\right) \]
  \pause where $\theta^{(s)} \stackrel{iid}{\sim} g(\theta)$ and 
  \[ \tilde{w}\left(\theta^{(s)}\right) = \frac{w\left(\theta^{(s)}\right)}{\sum_{j=1}^S w(\theta^j)} \]
  \pause is the \alert{normalized} importance weight. 
}

\begin{frame}
\frametitle{Example: Normal-Cauchy model}
  If $Y \sim N(\theta,1)$ and $\theta\sim Ca(0,1)$, then 
  \[ p(\theta|y) \propto e^{-(y-\theta)^2/2} \frac{1}{(1+\theta^2)} \]
  for all $\theta$. 
  
  \vspace{0.2in} \pause 
  
  If we choose a $N(y,1)$ proposal, we have
  \[ g(\theta)=\frac{1}{\sqrt{2\pi}}  e^{-(\theta-y)^2/2} \]
  \pause with 
  \[ w(\theta) = \frac{q(\theta|y)}{g(\theta)} = \frac{\sqrt{2\pi}}{(1+\theta^2)} \]

\end{frame}

\begin{frame}[fragile]
\frametitle{Normalized importance weights}
<<importance_sampling, fig.width=8>>=
y = 1
n = 1000
theta = rnorm(n, y)
weight = exp(q(theta,y,log=TRUE)-g(theta,y,log=TRUE))
qplot(x=theta,y=weight/sum(weight)) +
  geom_point() +
  labs(y="Normalized importance weight", x = expression(theta))
@
\end{frame}

\begin{frame}[fragile]
<<importance_sampling_mean, message=FALSE, fig.width=8, echo=TRUE>>=
library(weights)
sum(weight*theta/sum(weight)) # Estimate mean
wtd.hist(theta, 100, prob=TRUE, weight=weight)
curve(q(x,y)/py(y), add=TRUE, col="red", lwd=2)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Resampling}
If an unweighted sample is desired, sample $\theta^{(s)}$ with replacement with probability equal to the normalized weights, $\tilde{w}\left(\theta^{(s)}\right)$.

<<resampling, warning=FALSE, echo=TRUE, fig.width=8>>=
# resampling
new_theta = sample(theta, replace=TRUE, prob=weight) # internally normalized
hist(new_theta, 100, prob=TRUE, main="Unweighted histogram of resampled draws"); curve(q(x,y)/py(y), add=TRUE, col="red", lwd=2)
@



\end{frame}


\frame{\frametitle{Heavy-tailed proposals}
  Although any proposal can be used for importance sampling, only proposals with heavy tails relative to the target will be efficient. 
  
  \vspace{0.2in} \pause
  
  For example, suppose our target is a standard Cauchy and our proposal is a standard normal, the weights are 
  \[ w\left(\theta^{(s)}\right) = \frac{p\left(\left.\theta^{(s)}\right|y\right)}{g(\theta^{(s)})} = \frac{\frac{1}{\pi(1+\theta^2)}}{\frac{1}{\sqrt{2\pi}}e^{-\theta^2/2}} \]
  For $\theta^{(s)}\stackrel{iid}{\sim} N(0,1)$, the weights for the largest $|\theta^{(s)}|$ will dominate the others.
}

\begin{frame}[fragile]
\frametitle{Importance weights for proposal with thin tails}
<<importance_sampling_weights, fig.width=8>>=
set.seed(16)
theta = rnorm(1000)
weight = dcauchy(theta)/dnorm(theta)
weight = weight/sum(weight)
whmax = which.max(weight)
qplot(theta,weight/sum(weight),geom="point") + 
  ylim(0,max(weight)) + 
  xlim(-theta[whmax],theta[whmax]) + 
  labs(x=expression(theta), y="Normalized importance weight")
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Effective sample size}
We can get a measure of how efficient the sample is by computing the effective sample size, i.e. how many independent unweighted draws do we effectively have:
\[ S_{eff} = \frac{1}{\sum_{s=1}^S (\tilde{w}\left(\theta^{(s)}\right))^2} \]
<<effective_size, echo=TRUE>>=
length(weight)
1/sum(weight^2)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Effective sample size}
<<cumulative_effective_size, fig.width=12, cache=TRUE, echo=TRUE>>=
set.seed(5)
theta = rnorm(1e4)
lweight = dcauchy(theta,log=TRUE)-dnorm(theta,log=TRUE)
cumulative_ess = length(lweight)
for (i in 1:length(lweight)) {
  lw = lweight[1:i]
  w = exp(lw-max(lw))
  w = w/sum(w)
  cumulative_ess[i] = 1/sum(w^2)
}
qplot(x=1:length(cumulative_ess), y=cumulative_ess, geom="line") + 
  labs(x="Number of samples", y="Effective sample size")
@
\end{frame}



% \begin{frame}[fragile]
% \frametitle{The idea}
% <<accept_reject, eval=FALSE>>=
% f = function(x) dnorm(x)/(1-pnorm(5))
% q = function(x) dexp(x-5)
% M = f(5)/q(5)
% 
% plot.pt = function(x) {
%   u = runif(length(x))
%   points(x,u*M*q(x), 
%          pch=ifelse(M*q(x)*u<f(x), 19, 4),
%          col=ifelse(M*q(x)*u<f(x), "red", "blue"))
% }
% 
% par(mfrow=c(1,2), mar=c(5,4,4,2)+0.1)
% curve(M*dexp(x-5), 5, 6, col="blue", lwd=2, xlab="x", ylab="u*M*q(x)", ylim=c(0,M), main=paste("M=",round(M,2)))
% curve(f, col="red",lwd=2, add=T)
% legend("topright",c("f(x)","M*q(x)"), col=c("red","blue"), lwd=2)
% plot.pt(5+qexp(runif(1e2,0,pexp(1))))
% 
% 
% 
% M = f(5)/q(5)*10
% 
% plot.pt = function(x) {
%   u = runif(length(x))
%   points(x,u*M*q(x), 
%          pch=ifelse(M*q(x)*u<f(x), 19, 4),
%          col=ifelse(M*q(x)*u<f(x), "red", "blue"))
% }
% 
% curve(M*dexp(x-5), 5, 6, col="blue", lwd=2, xlab="x", ylab="u*M*q(x)", ylim=c(0,M), main=paste("M=",round(M,2)))
% curve(f, col="red",lwd=2, add=T)
% legend("topright",c("f(x)","M*q(x)"), col=c("red","blue"), lwd=2)
% plot.pt(5+qexp(runif(1e2,0,pexp(1))))
% @
% \end{frame}
% 
% \begin{frame}[fragile]
% \frametitle{The idea}
% <<accept_reject_plot, echo=FALSE>>=
% <<accept_reject>>
% @
% \end{frame}
% 
% \frame{\frametitle{Simulating extreme events}
% 	Suppose you are interested in simulating $X\sim N(0,1)\mathrm{I}(X>5)$. \pause We know that 
%  	\[ f(x) = \frac{\frac{1}{\sqrt{2\pi}} \exp(-x^2/2)}{1-\mathrm{\Phi}(5)}. \]
% 	\pause We can use a shifted exponential distribution as a proposal, i.e. $X^* = 5+Y$ where $Y\sim Exp(1)$. \pause We calculate
% 	{\small
% 	\[ M = \sup_x \frac{f(x)}{q(x)} \pause = \frac{\frac{1}{\sqrt{2\pi}}}{1-\mathrm{\Phi}(5)} \sup_x \frac{\exp(-x^2/2)}{\exp(-[x-5])} \pause = \frac{\frac{1}{\sqrt{2\pi}}}{1-\mathrm{\Phi}(5)} \exp(-5^2/2) \pause \approx 5.19 \]
% 	}
% }
% 
% \begin{frame}[fragile]
% <<accept_reject2, eval=FALSE>>=
% M = f(5)/q(5)
% ar = function() {
%   x = 0
%   while(x<5) {
%     u = runif(1)
%     x = rexp(1)
%     x = ifelse(u<f(x)/(M*q(x)), x, 0)
%   }
%   return(x)
% }
% 
% r = rdply(1e3, ar)
% ggplot(r, aes(x=V1))+
%   geom_histogram(aes(y=..density..), binwidth=.05)+
%   stat_function(fun=f, col="red")+
%   stat_function(fun=function(x) M*dexp(x-5), col="blue")
% @
% \end{frame}
% 
% \begin{frame}[fragile]
% <<accept_reject2_plot, echo=FALSE, cache=TRUE>>=
% <<accept_reject2>>
% @
% \end{frame}
% 
% \frame{\frametitle{Unknown normalizing constant}
% 	Suppose you are interested in simulating $X\sim N(0,1)\mathrm{I}(X>5)$. \pause We know that 
% 	\[ f(x)\propto f_2(x) = \exp(-x^2/2). \]
% 	\pause We calculate
% 	\[ M_2 = \sup_x \frac{f_2(x)}{q(x)} \pause = \sup_x \frac{\exp(-x^2/2)}{\exp(-[x-5])} \pause= \exp(-5^2/2) \pause \approx 3.73\times 10^{-6}  \]
%   \pause We can still draw $X^*\sim q(x)$ and accept with probability $f_2(x)/M_2 q(x)$ \pause since
% 	\[ M = \frac{\frac{1}{\sqrt{2\pi}}}{1-\mathrm{\Phi}(5)} M_2 \pause \implies \frac{f_2(x)}{M_2} = \frac{f(x)}{M}  \] 
% 	for all $x$. \pause But $M_2$ does not relate to the acceptance probability.
% }
% 
% \section{Summary}
% \frame{\frametitle{Summary}
% 	The accept-reject method is a way of obtaining samples from $f(x)$ \pause when
% 	\begin{itemize}
% 	\item the inverse cdf cannot be computed \pause or is expensive to compute \pause and
% 	\item when $f(x)$ can be evaluated at least up to a normalizing constant. \pause 
% 	\end{itemize}
% 	Based on 
% 	\begin{itemize}
% 	\item a draw from a proposal $q(x)$, \pause 
% 	\item a constant $M$ such that $f(x) \le M q(x)$\pause, and
% 	\item a uniform draw.
% 	\end{itemize}
% }

\end{document}
